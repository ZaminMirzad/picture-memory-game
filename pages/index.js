import axios from "axios";
import Head from "next/head";

import { useState, useEffect } from "react";
import styles from "../styles/Home.module.css";

import Card from "../components/Card";

export default function Home() {
  const [images, setImages] = useState([]);
  const [shaffledcards, setShaffledcards] = useState([]);
  const [turns, setTurns] = useState(0);

  const [choiceone, setChoiceone] = useState(null);
  const [choicetwo, setChoicetwo] = useState(null);
  const [disabled, setDisabled] = useState(false);
  const [score, setScore] = useState(0);

  console.log(shaffledcards, turns);
  const shaffle = () => {
    const shaffledimages = [...images, ...images]
      .sort(() => Math.random() - 0.5)
      .map((card) => ({ ...card, id: Math.random(), matched: false }));

    setShaffledcards(shaffledimages);
    setTurns(0);
  };

  useEffect(() => {
    const fetchImage = async () => {
      axios
        .get("https://picsum.photos/v2/list?&limit=8")
        .then((res) => setImages(res.data));
    };
    fetchImage();
  }, []);

  // handle choice
  const handleChoice = (card) => {
    choiceone ? setChoicetwo(card) : setChoiceone(card);
  };

  // handle reset
  const resethandle = () => {
    setChoiceone(null);
    setChoicetwo(null);
    setTurns((prev) => prev + 1);
    setDisabled(false);
  };
  // handle matching
  useEffect(() => {
    if (choiceone && choicetwo) {
      setDisabled(true);
      if (choiceone.download_url === choicetwo.download_url) {
        setShaffledcards((prevcards) => {
          return prevcards.map((card) => {
            if (card.download_url === choiceone.download_url) {
              return { ...card, matched: true };
            } else {
              return card;
            }
          });
        });
        resethandle();
      } else {
        setTimeout(() => resethandle(), 500);
      }
    }
  }, [choiceone, choicetwo]);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <h1>Welcome to Picture Memory Game</h1>
          <button onClick={shaffle}>New Game</button>
          Moves: {turns}
          {/* &nbsp;&nbsp; Score: {score} */}
        </div>

        <div className={styles.cardgrid}>
          {shaffledcards
            ?.filter((x) => x.matched === false)
            .map((i) => {
              return (
                <Card
                  key={i.id}
                  card={i}
                  handleChoice={handleChoice}
                  flipped={i === choiceone || i === choicetwo || i.matched}
                  disabled={disabled}
                />
              );
            })}
        </div>
      </main>
    </div>
  );
}
